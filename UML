UML
 - 소프트웨어 공학에서 사용되는 표준화된 범용 모델링 언어로 소프트웨어 개념을 다이어그램으로 그리기위해 사용하는 시각적 표기법.
UML의 필요성
 1)의사소통하기 좋다.
 2)대규모 프로젝트 구조의 로드맵을 만들때 유용하다.
 3)개발할 시스템 구축에 대한 기초를 마련할수있다.
 4)백엔드 문서용으로 사용하기 좋다 ->진행하던 프로젝트 를 다른 팀이 맡을 경우 유용.

클래스다이어그램
 클래스
  - 동일한 속성과 행위를 수행하는 겍체의 집합.
  - 객체를 생성하는 설계도.
 클래스 다이어그램 기본 구조
  public : +
  private : -
  protected : #
  
  ※리턴타입이 없을경우 void로 보면됨.
  
 UML Operation 
  OwnerScope - CLASSIFIER 설정시 Static 설정되며  밑줄이 생김.
  Changebility - FROZEN  설정시 값이 변경되지않음
  IsAbstract - 체크시 추상메소드로 전환. 글자 기울어짐.
  
 클래스 사이의 관계표현
  - 클래스 사이의 여러 종류의 관계선을 이용하여 표현.
 dependeny  -----> 클래스간의 지역 변수에서 참조하는 관계
 Aggregation ㅡ◇ 클래스간의 지역변수에서 참조하는 관계로 두 클래스의 라이프사이클이 다를때.
 Composition ㅡ◆ 클래스간의 지역변수에서 참조하는 관계로 두 클래스의 라이프사이클이 같을때.
 Generalization ㅡ▷한 클래스가 다른 클래스를 상속하는 관계.
 Realization ㅡ▷ 상송해서 구현해야하는 인터페이스
 
 유스케이스 다이어그램
  - Actor 와 시스템이 수행하는 활동간의 관계를 표시하며, 시스템의 기능적인 요구사항을 설명하기 위한 도구
   - 구성요소
    Actor : 시스템 외부에 있으면서 시스템과 상호 작용을 하는 사람 또는 시스템
     - 시스템의 외부에있고 시스템과 상호작용을 하는 사람 또는 시스템.
     - 원과 선을 조합하여 사람 모양으로 표현하고 아래 또는 위에 역할 작성.
    System : 만들고자 하는 어플리케이션
     - 만들고자하는 프로그램
     - 유스케이스들을 둘러싼 사각형 틀로 시스템 명칭을 안쪽 상단에 작성.
    Usecase : 시스템이 엑터에게 제공해야 하는 기능의 집합
     - 시스템이 액터에게 제공해야하는 기능
     - 사용자 입장에서 바라본 시스템의 기능
     - 타원형 모양으로 형성.
    Relation :엑터와 유스케이스 사이의 의미있는 관계
     - 유스케이스와 엑터간의 상호 작용이 있음을 표현
     - 사용자가 글을 등록한다는 기능과 상호작용이 있다는 것을 의미.
      
 유스케이스 다이어그램 순서
      1.액터식별
        - 액터는 시스템에 관련이 있는 사용자의 역할과 외부 시스템으로 식별 가능
      2.유스케이스 식별
        - 액터가 요구하는 서비스, 정보를 유스케이스로 식별할 수 있고 액터가 시스
          템과 상호작용 하는 행위를 유스케이스로도 나타낼 수 있다.
      3.관계정의
        - 액터간, 유스케이스간 일반화, 연관관계를 정의하고, 포함, 확장관계를 정  
            의한다.
      
 유스케이스 정의서
1. 유스케이스명 : 액터가 시스템을 통해 달성할 목적을 명확하게 표현
2. 액터명 : 시스템에서 수행하는 역할 이름
3. 개요 : 유스케이스를 수행하는 개요
4. 사전조건 : 올바르게 동작하기 위해 사전에 충족되어야 하는 조건
5. 사후조건 : 유스케이스가 실행된 후 만족해야 하는 조건 기술
6. 기본흐름 : 시스템과 엑터 사이에 목적을 달성하기 위한 기본적인 상호흐름
을 기술하며, 오류나 예외가 발생하지 않는 것을 전제로 작성
7. 대체흐름 : 기본흐름으로 부터 경우에 따라 선택적으로 실행되고, 다시 기본
흐름으로 돌아오거나, 예외가 발생한 경우 이를 처리하는 흐름 기술
 
